package android_programe.FileSystem;

import java.util.HashMap;
import java.util.UUID;

import android_programe.MemoryManager.FileMetaData;
import android_programe.Util.FileConstant;
import android_programe.Util.FileOperateHelper;

/**
 * 管理文件的版本信息
 * @author zhangsw
 *
 */
public class VersionManager {

	//版本历史
	private VersionHistory versionHistory;
	
	//逻辑时钟，用于记录自己以及其他设备上文件版本号
	private VersionMap versionMap;
	
	private FileMetaData fileMetaData;

	//默认的初始版本号，为0
	public static int INITIAL_VERSION_NUMBER = 0;
	
	//如果文件不存在，则版本号为-1
	public static int FILENOTEXIST = -1;
	
	//默认的每次更新增加的数值，为1
	private static int DEFAULT_ADDITION = 1;
	
	
	public VersionManager(){
		
	}
	//初始化versionMap,由于需要保存本地文件版本号，因此，map中至少有一个设备
	public VersionManager(String deviceName,String path){
		if(FileOperateHelper.fileExist(path)){
			System.out.println("file exist,initialize versionMap and fileMetaData");
			versionMap = new VersionMap();
			versionMap.put(deviceName, INITIAL_VERSION_NUMBER);
			//为文件生成全局唯一的id
			String fileID = UUID.randomUUID().toString();
			long fileLength = FileOperateHelper.getFileLength(path);
			String relaitvePath = path.substring(FileConstant.DEFAULTROOTPATH.length());
			fileMetaData = new FileMetaData(fileID,INITIAL_VERSION_NUMBER, relaitvePath, path, fileLength, deviceName,FileOperateHelper.getFileModifiedTime(path));
		}
		else{
			versionMap = new VersionMap();
			versionMap.put(deviceName, FILENOTEXIST);
			fileMetaData = new FileMetaData();
			fileMetaData.setVersionID(FILENOTEXIST);
		}
	}
	
	public VersionManager(String deviceName,int versionNumber){
		versionMap = new VersionMap();
		versionMap.put(deviceName, versionNumber);
	}
	
	
	
	//更新map中的一个设备及其版本号
	public void updateVersionNumber(String deviceName,int number){
		versionMap.put(deviceName, number);
		System.out.println("local update version number,device: " + deviceName +" ,number is:" + number);
		fileMetaData.setVersionID(number);
	}
	
	//更新文件版本，包括了map及树的更新
	public void updateVersionNumber(String deviceName){
		//更新map
		addVersionNumber(deviceName,DEFAULT_ADDITION);
		//更新树
	}
	
	//向map中添加一个新设备，版本号为文件不存在
	public void addDevice(String deviceName){
		versionMap.put(deviceName, FILENOTEXIST);	
	}
	
	//向map中添加一个新设备
	public void addDevice(String deviceName,int number){
		versionMap.put(deviceName, number);
	}
	
	//从map中删除一个设备及其版本号
	public void deleteDevice(String deviceName){
		versionMap.remove(deviceName);
	}
	
	
	
	//将指定对象的versionNumber增加number
	public void addVersionNumber(String deviceName,int number){
		Integer versionNumber = versionMap.getVersionNumber(deviceName);
		assert versionNumber != null :"Device not existing,can't add its versionNumber";
		assert versionNumber >= 0 :"Device's versionNumber is illegal,it should be properly initialized";
		versionNumber += number;
		versionMap.put(deviceName, versionNumber);
	}
	
	//初始化map中的一个设备的版本号
	public void initialVersionNumber(String deviceName){
		versionMap.put(deviceName, INITIAL_VERSION_NUMBER);
	}
	
	//获取指定设备的versionNumber
	public Integer getVersionNumber(String deviceName){
		return versionMap.getVersionNumber(deviceName);
	}
	
	/**
	 * 设置文件的versionMap
	 * @param versionMap
	 */
	public void setVersionMap(VersionMap versionMap){
		this.versionMap = versionMap;
	}
	
	/**
	 * 获取文件的versionMap
	 * @return
	 */
	public VersionMap getVersionMap(){
		return versionMap;
	}
	
	/**
	 * 设置文件的metaData
	 * @param metaData
	 */
	public void setFileMetaData(FileMetaData metaData){
		fileMetaData = metaData;
	}
	
	/**
	 * 获取文件的metaData
	 * @return
	 */
	public FileMetaData getFileMetaData(){
		return fileMetaData;
	}
}
